#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
file: sem

Description: a wrapper for every module available in sem.

author: Yoann Dupont
copyright (c) 2013 Yoann Dupont - all rights reserved

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import logging
import os.path
import unittest

import software

from obj.setup  import get_modules
from obj.logger import logging_format
 
sem_logger = logging.getLogger("sem")

if __name__ == "__main__":
    def find_suggestions(operation, ids):
        suggestions = []
        for name in ids:
            shortest = (name if len(name) < len(operation) else operation)
            longest  = (operation if shortest == name else name)
            if shortest in longest:
                suggestions.append(name)
        return suggestions
    
    import sys, runpy

    ids, pathes = get_modules("src")
    name        = os.path.basename(sys.argv[0])
    operation   = (sys.argv[1] if len(sys.argv) > 1 else "-h")
    
    
    if operation in ids:
        n = ids.index(operation)
        runpy.run_module(pathes[n], run_name="__main__", alter_sys=True)
    elif operation in ["-h", "--help"]:
        print("Usage: {} <module> [module arguments]\n".format(name))
        print("Module list:")
        for i in ids:
            print("\t"+i)

        print("\nfor SEM's current version: -v or --version\n")
        print("for informations about the last revision: -i or --informations")
        print("for playing all tests: --test")
    elif operation in ["-v", "--version"]:
        print(software.full_name())
    elif operation in ["-i", "--informations"]:
        print(software.informations())
    elif operation == "--test":
        for test in [test_module for test_module in os.listdir("tests") if test_module.startswith("test_") and test_module.endswith(".py")]:
            testsuite = unittest.TestLoader().discover('tests')
            unittest.TextTestRunner(verbosity=2).run(testsuite)
    else:
        print("Module not found: " + operation)
        suggestions = find_suggestions(operation, ids)
        if len(suggestions) > 0:
            print("Did you mean one of the following ?")
            for suggestion in suggestions:
                print("\t%s" %suggestion)
        else:
            print("No suggestion found... Do thou mockest me ?")
